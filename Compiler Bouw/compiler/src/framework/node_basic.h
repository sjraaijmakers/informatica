
/**
 * @file node_basic.h
 *
 * Functions to allocate node structures
 * 
 * THIS FILE HAS BEEN GENERATED USING 
 * $Id: node_basic.h.xsl 14593 2006-01-31 17:09:55Z cg $.
 * DO NOT EDIT THIS FILE AS MIGHT BE CHANGED IN A LATER VERSION.
 *
 * ALL CHANGES MADE TO THIS FILE WILL BE OVERWRITTEN!
 *
 */

#ifndef _SAC_NODE_BASIC_H_
#define _SAC_NODE_BASIC_H_

#include "types.h"


#define _SAC_AST_VERSION_ "0.9"


/*****************************************************************************
 * macros and functions for N_program
 *****************************************************************************/

#define PROGRAM_DECLARATIONS( n) ((n)->sons.N_program->Declarations)
#define PROGRAM_SYMBOLTABLE( n) ((n)->attribs.N_program->SymbolTable)
extern node *TBmakeProgram (node * Declarations);

/*****************************************************************************
 * macros and functions for N_declarations
 *****************************************************************************/

#define DECLARATIONS_DECLARATION( n) ((n)->sons.N_declarations->Declaration)
#define DECLARATIONS_NEXT( n) ((n)->sons.N_declarations->Next)
extern node *TBmakeDeclarations (node * Declaration, node * Next);

/*****************************************************************************
 * macros and functions for N_fundec
 *****************************************************************************/

#define FUNDEC_FUNHEADER( n) ((n)->sons.N_fundec->FunHeader)
extern node *TBmakeFundec (node * FunHeader);

/*****************************************************************************
 * macros and functions for N_fundef
 *****************************************************************************/

#define FUNDEF_FUNHEADER( n) ((n)->sons.N_fundef->FunHeader)
#define FUNDEF_FUNBODY( n) ((n)->sons.N_fundef->FunBody)
#define FUNDEF_NEXT( n) ((n)->sons.N_fundef->Next)
#define FUNDEF_EXPORT( n) ((n)->attribs.N_fundef->Export)
#define FUNDEF_SYMBOLTABLE( n) ((n)->attribs.N_fundef->SymbolTable)
extern node *TBmakeFundef (bool Export, node * FunHeader, node * FunBody,
			   node * Next);

/*****************************************************************************
 * macros and functions for N_funheader
 *****************************************************************************/

#define FUNHEADER_PARAMS( n) ((n)->sons.N_funheader->Params)
#define FUNHEADER_NAME( n) ((n)->attribs.N_funheader->Name)
#define FUNHEADER_RETTYPE( n) ((n)->attribs.N_funheader->RetType)
extern node *TBmakeFunheader (char *Name, basictype RetType, node * Params);

/*****************************************************************************
 * macros and functions for N_globaldec
 *****************************************************************************/

#define GLOBALDEC_TYPE( n) ((n)->attribs.N_globaldec->Type)
#define GLOBALDEC_NAME( n) ((n)->attribs.N_globaldec->Name)
extern node *TBmakeGlobaldec (basictype Type, char *Name);

/*****************************************************************************
 * macros and functions for N_globaldef
 *****************************************************************************/

#define GLOBALDEF_EXPR( n) ((n)->sons.N_globaldef->Expr)
#define GLOBALDEF_EXPORT( n) ((n)->attribs.N_globaldef->Export)
#define GLOBALDEF_TYPE( n) ((n)->attribs.N_globaldef->Type)
#define GLOBALDEF_NAME( n) ((n)->attribs.N_globaldef->Name)
extern node *TBmakeGlobaldef (bool Export, basictype Type, char *Name,
			      node * Expr);

/*****************************************************************************
 * macros and functions for N_param
 *****************************************************************************/

#define PARAM_NEXT( n) ((n)->sons.N_param->Next)
#define PARAM_TYPE( n) ((n)->attribs.N_param->Type)
#define PARAM_NAME( n) ((n)->attribs.N_param->Name)
extern node *TBmakeParam (basictype Type, char *Name, node * Next);

/*****************************************************************************
 * macros and functions for N_block
 *****************************************************************************/

#define BLOCK_STATEMENTS( n) ((n)->sons.N_block->Statements)
extern node *TBmakeBlock (node * Statements);

/*****************************************************************************
 * macros and functions for N_funbody
 *****************************************************************************/

#define FUNBODY_LOCALFUNVARS( n) ((n)->sons.N_funbody->LocalFunVars)
#define FUNBODY_STATEMENTS( n) ((n)->sons.N_funbody->Statements)
extern node *TBmakeFunbody (node * LocalFunVars, node * Statements);

/*****************************************************************************
 * macros and functions for N_vardec
 *****************************************************************************/

#define VARDEC_EXPR( n) ((n)->sons.N_vardec->Expr)
#define VARDEC_NEXT( n) ((n)->sons.N_vardec->Next)
#define VARDEC_TYPE( n) ((n)->attribs.N_vardec->Type)
#define VARDEC_NAME( n) ((n)->attribs.N_vardec->Name)
extern node *TBmakeVardec (basictype Type, char *Name, node * Expr,
			   node * Next);

/*****************************************************************************
 * macros and functions for N_statements
 *****************************************************************************/

#define STATEMENTS_STATEMENT( n) ((n)->sons.N_statements->Statement)
#define STATEMENTS_NEXT( n) ((n)->sons.N_statements->Next)
extern node *TBmakeStatements (node * Statement, node * Next);

/*****************************************************************************
 * macros and functions for N_assign
 *****************************************************************************/

#define ASSIGN_EXPR( n) ((n)->sons.N_assign->Expr)
#define ASSIGN_ID( n) ((n)->sons.N_assign->Id)
extern node *TBmakeAssign (node * Expr, node * Id);

/*****************************************************************************
 * macros and functions for N_ifelse
 *****************************************************************************/

#define IFELSE_IFEXPR( n) ((n)->sons.N_ifelse->IfExpr)
#define IFELSE_IFBLOCK( n) ((n)->sons.N_ifelse->IfBlock)
#define IFELSE_ELSEBLOCK( n) ((n)->sons.N_ifelse->ElseBlock)
extern node *TBmakeIfelse (node * IfExpr, node * IfBlock, node * ElseBlock);

/*****************************************************************************
 * macros and functions for N_while
 *****************************************************************************/

#define WHILE_EXPR( n) ((n)->sons.N_while->Expr)
#define WHILE_BLOCK( n) ((n)->sons.N_while->Block)
extern node *TBmakeWhile (node * Expr, node * Block);

/*****************************************************************************
 * macros and functions for N_dowhile
 *****************************************************************************/

#define DOWHILE_EXPR( n) ((n)->sons.N_dowhile->Expr)
#define DOWHILE_BLOCK( n) ((n)->sons.N_dowhile->Block)
extern node *TBmakeDowhile (node * Expr, node * Block);

/*****************************************************************************
 * macros and functions for N_for
 *****************************************************************************/

#define FOR_STARTEXPR( n) ((n)->sons.N_for->StartExpr)
#define FOR_ENDEXPR( n) ((n)->sons.N_for->EndExpr)
#define FOR_STEPEXPR( n) ((n)->sons.N_for->StepExpr)
#define FOR_BLOCK( n) ((n)->sons.N_for->Block)
#define FOR_COUNTERNAME( n) ((n)->attribs.N_for->CounterName)
extern node *TBmakeFor (char *CounterName, node * StartExpr, node * EndExpr,
			node * StepExpr, node * Block);

/*****************************************************************************
 * macros and functions for N_return
 *****************************************************************************/

#define RETURN_RETVALUE( n) ((n)->sons.N_return->RetValue)
extern node *TBmakeReturn (node * RetValue);

/*****************************************************************************
 * macros and functions for N_exprs
 *****************************************************************************/

#define EXPRS_EXPR( n) ((n)->sons.N_exprs->Expr)
#define EXPRS_NEXT( n) ((n)->sons.N_exprs->Next)
extern node *TBmakeExprs (node * Expr, node * Next);

/*****************************************************************************
 * macros and functions for N_binop
 *****************************************************************************/

#define BINOP_LEFT( n) ((n)->sons.N_binop->Left)
#define BINOP_RIGHT( n) ((n)->sons.N_binop->Right)
#define BINOP_OP( n) ((n)->attribs.N_binop->Op)
extern node *TBmakeBinop (binop Op, node * Left, node * Right);

/*****************************************************************************
 * macros and functions for N_monop
 *****************************************************************************/

#define MONOP_EXPR( n) ((n)->sons.N_monop->Expr)
#define MONOP_OP( n) ((n)->attribs.N_monop->Op)
extern node *TBmakeMonop (monop Op, node * Expr);

/*****************************************************************************
 * macros and functions for N_cast
 *****************************************************************************/

#define CAST_EXPR( n) ((n)->sons.N_cast->Expr)
#define CAST_TYPE( n) ((n)->attribs.N_cast->Type)
extern node *TBmakeCast (basictype Type, node * Expr);

/*****************************************************************************
 * macros and functions for N_funcall
 *****************************************************************************/

#define FUNCALL_PARAMS( n) ((n)->sons.N_funcall->Params)
#define FUNCALL_NAME( n) ((n)->attribs.N_funcall->Name)
extern node *TBmakeFuncall (char *Name, node * Params);

/*****************************************************************************
 * macros and functions for N_id
 *****************************************************************************/

#define ID_NAME( n) ((n)->attribs.N_id->Name)
#define ID_SYMBOLTABLE( n) ((n)->attribs.N_id->Symboltable)
extern node *TBmakeId (char *Name);

/*****************************************************************************
 * macros and functions for N_int
 *****************************************************************************/

#define INT_VALUE( n) ((n)->attribs.N_int->Value)
extern node *TBmakeInt (int Value);

/*****************************************************************************
 * macros and functions for N_float
 *****************************************************************************/

#define FLOAT_VALUE( n) ((n)->attribs.N_float->Value)
extern node *TBmakeFloat (float Value);

/*****************************************************************************
 * macros and functions for N_ternary
 *****************************************************************************/

#define TERNARY_PRED( n) ((n)->sons.N_ternary->Pred)
#define TERNARY_THEN( n) ((n)->sons.N_ternary->Then)
#define TERNARY_ELSE( n) ((n)->sons.N_ternary->Else)
extern node *TBmakeTernary (node * Pred, node * Then, node * Else);

/*****************************************************************************
 * macros and functions for N_bool
 *****************************************************************************/

#define BOOL_VALUE( n) ((n)->attribs.N_bool->Value)
extern node *TBmakeBool (bool Value);

/*****************************************************************************
 * macros and functions for N_symboltable
 *****************************************************************************/

#define SYMBOLTABLE_ENTRIES( n) ((n)->sons.N_symboltable->Entries)
#define SYMBOLTABLE_PARENT( n) ((n)->attribs.N_symboltable->Parent)
extern node *TBmakeSymboltable (node * Parent, node * Entries);

/*****************************************************************************
 * macros and functions for N_symboltableentry
 *****************************************************************************/

#define SYMBOLTABLEENTRY_NEXT( n) ((n)->sons.N_symboltableentry->Next)
#define SYMBOLTABLEENTRY_NAME( n) ((n)->attribs.N_symboltableentry->Name)
#define SYMBOLTABLEENTRY_TYPE( n) ((n)->attribs.N_symboltableentry->Type)
#define SYMBOLTABLEENTRY_PARAMS( n) ((n)->attribs.N_symboltableentry->Params)
#define SYMBOLTABLEENTRY_ISFUNCTION( n) ((n)->attribs.N_symboltableentry->IsFunction)
#define SYMBOLTABLEENTRY_IMPORT( n) ((n)->attribs.N_symboltableentry->import)
#define SYMBOLTABLEENTRY_EXPORT( n) ((n)->attribs.N_symboltableentry->Export)
extern node *TBmakeSymboltableentry (char *Name, basictype Type,
				     bool IsFunction, bool import,
				     bool Export, node * Next);

/*****************************************************************************
 * macros and functions for N_error
 *****************************************************************************/

#define ERROR_NEXT( n) ((n)->sons.N_error->Next)
#define ERROR_MESSAGE( n) ((n)->attribs.N_error->message)
#define ERROR_ANYPHASE( n) ((n)->attribs.N_error->anyphase)
extern node *TBmakeError (char *message, compiler_phase_t anyphase,
			  node * Next);

#endif /* _SAC_NODE_BASIC_H_ */
