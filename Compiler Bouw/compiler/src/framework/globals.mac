/* ---------------------------------------------------------------------------
 * 
 * SAC Compiler Construction Framework
 * 
 * ---------------------------------------------------------------------------
 * 
 * SAC COPYRIGHT NOTICE, LICENSE, AND DISCLAIMER
 * 
 * (c) Copyright 1994 - 2011 by
 * 
 *   SAC Development Team
 *   SAC Research Foundation
 * 
 *   http://www.sac-home.org
 *   email:info@sac-home.org
 * 
 *   All rights reserved
 * 
 * ---------------------------------------------------------------------------
 * 
 * The SAC compiler construction framework, all accompanying 
 * software and documentation (in the following named this software)
 * is developed by the SAC Development Team (in the following named
 * the developer) which reserves all rights on this software.
 * 
 * Permission to use this software is hereby granted free of charge
 * exclusively for the duration and purpose of the course 
 *   "Compilers and Operating Systems" 
 * of the MSc programme Grid Computing at the University of Amsterdam.
 * Redistribution of the software or any parts thereof as well as any
 * alteration  of the software or any parts thereof other than those 
 * required to use the compiler construction framework for the purpose
 * of the above mentioned course are not permitted.
 * 
 * The developer disclaims all warranties with regard to this software,
 * including all implied warranties of merchantability and fitness.  In no
 * event shall the developer be liable for any special, indirect or
 * consequential damages or any damages whatsoever resulting from loss of
 * use, data, or profits, whether in an action of contract, negligence, or
 * other tortuous action, arising out of or in connection with the use or
 * performance of this software. The entire risk as to the quality and
 * performance of this software is with you. Should this software prove
 * defective, you assume the cost of all servicing, repair, or correction.
 * 
 * ---------------------------------------------------------------------------
 */ 


#ifndef GLOBALtype
#define GLOBALtype( type)
#endif

#ifndef GLOBALname
#define GLOBALname( name)
#endif

#ifndef GLOBALinit
#define GLOBALinit( init)
#endif


#define GLOBAL( type, name, init) GLOBALtype(type) GLOBALname(name) GLOBALinit(init)


/*
 * Phase mechanism globals
 */

GLOBAL( compiler_phase_t, compiler_phase, PH_initial)
GLOBAL( compiler_phase_t, compiler_subphase, PH_initial)
GLOBAL( compiler_phase_t, compiler_cyclephase, PH_initial)
GLOBAL( compiler_phase_t, compiler_anyphase, PH_initial)
GLOBAL( int, cycle_counter, 0)
GLOBAL( int, max_optcycles, 10)
GLOBAL( bool, treecheck, FALSE)


/*
 * Compile time information globals
 */

GLOBAL( int, verbosity, 3)


/*
 * Break mechanism globals
 */

GLOBAL( compiler_phase_t, break_after_phase, PH_undefined)
GLOBAL( compiler_phase_t, break_after_subphase, PH_undefined)
GLOBAL( compiler_phase_t, break_after_cyclephase, PH_undefined)
GLOBAL( int, break_cycle_specifier, 1)


/*
 * DBUG mechanism globals
 */

GLOBAL( compiler_phase_t, my_dbug_from, PH_initial)
GLOBAL( compiler_phase_t, my_dbug_to, PH_final)
GLOBAL( bool, my_dbug, FALSE)
GLOBAL( bool, my_dbug_active, FALSE)
GLOBAL( char *, my_dbug_str, NULL)


/*
 * File handling globals
 */

GLOBAL( char*, infile, NULL)
GLOBAL( char*, currentfile, NULL)
GLOBAL( char*, outfile, NULL)


/*
 * Scanner and parser globals
 */

GLOBAL( int, line, 0)
GLOBAL( int, col, 0)
GLOBAL( int, cpp, FALSE)


#undef GLOBALtype
#undef GLOBALname
#undef GLOBALinit
#undef GLOBAL



