Terminals unused in grammar

   SQB_L
   SQB_R
   OTHER


Grammar

    0 $accept: program $end

    1 program: declarations

    2 declarations: declaration declarations
    3             | declaration

    4 declaration: EXTERN funheader SEMICOLON
    5            | export funheader CB_L funbody CB_R
    6            | globaldef
    7            | globaldec

    8 export: EXPORT
    9       | %empty

   10 funheader: VOID ID BRACKET_L param BRACKET_R
   11          | type ID BRACKET_L param BRACKET_R
   12          | VOID ID BRACKET_L BRACKET_R
   13          | type ID BRACKET_L BRACKET_R

   14 globaldef: export type ID SEMICOLON
   15          | export type ID LET expr SEMICOLON

   16 funbody: localfunvar statements
   17        | statements

   18 localfunvar: type ID LET expr SEMICOLON
   19            | type ID SEMICOLON
   20            | funheader CB_L funbody CB_R
   21            | type ID LET expr SEMICOLON localfunvar
   22            | type ID SEMICOLON localfunvar
   23            | funheader CB_L funbody CB_R localfunvar

   24 globaldec: EXTERN type ID SEMICOLON

   25 exprs: expr COMMA exprs
   26      | expr
   27      | %empty

   28 expr: BRACKET_L expr BRACKET_R
   29     | binop
   30     | constant
   31     | monop
   32     | BRACKET_L type BRACKET_R expr
   33     | funcall
   34     | ID

   35 funcall: ID BRACKET_L exprs BRACKET_R

   36 param: type ID COMMA param
   37      | type ID

   38 statements: statement statements
   39           | %empty

   40 statement: assign
   41          | funcall SEMICOLON
   42          | IF BRACKET_L expr BRACKET_R block
   43          | IF BRACKET_L expr BRACKET_R block ELSE block
   44          | WHILE BRACKET_L expr BRACKET_R block
   45          | DO block WHILE BRACKET_L expr BRACKET_R SEMICOLON
   46          | FOR BRACKET_L INT ID LET expr COMMA expr COMMA expr BRACKET_R block
   47          | FOR BRACKET_L INT ID LET expr COMMA expr BRACKET_R block
   48          | RETURN expr SEMICOLON
   49          | RETURN SEMICOLON

   50 assign: id LET expr SEMICOLON

   51 id: ID

   52 block: CB_L statements CB_R
   53      | statement

   54 type: BOOL
   55     | INT
   56     | FLOAT

   57 constant: FLOATVAL
   58         | INTVAL
   59         | BOOLVAL

   60 monop: MINUS expr
   61      | NOT expr

   62 binop: expr PLUS expr
   63      | expr MINUS expr
   64      | expr STAR expr
   65      | expr SLASH expr
   66      | expr PERCENT expr
   67      | expr LE expr
   68      | expr LT expr
   69      | expr GE expr
   70      | expr GT expr
   71      | expr EQ expr
   72      | expr NE expr
   73      | expr OR expr
   74      | expr AND expr


Terminals, with rules where they appear

$end (0) 0
error (256)
BRACKET_L (258) 10 11 12 13 28 32 35 42 43 44 45 46 47
BRACKET_R (259) 10 11 12 13 28 32 35 42 43 44 45 46 47
COMMA (260) 25 36 46 47
SEMICOLON (261) 4 14 15 18 19 21 22 24 41 45 48 49 50
CB_L (262) 5 20 23 52
CB_R (263) 5 20 23 52
SQB_L (264)
SQB_R (265)
MINUS (266) 60 63
PLUS (267) 62
STAR (268) 64
SLASH (269) 65
PERCENT (270) 66
LE (271) 67
LT (272) 68
GE (273) 69
GT (274) 70
EQ (275) 71
NE (276) 72
OR (277) 73
AND (278) 74
NOT (279) 61
LET (280) 15 18 21 46 47 50
FLOAT (281) 56
INT (282) 46 47 55
BOOL (283) 54
IF (284) 42 43
ELSE (285) 43
DO (286) 45
WHILE (287) 44 45
FOR (288) 46 47
VOID (289) 10 12
RETURN (290) 48 49
EXTERN (291) 4 24
EXPORT (292) 8
OTHER (293)
IF_NO_ELSE (294)
CAST (295)
PARENTHESISED (296)
INTVAL (297) 58
FLOATVAL (298) 57
ID (299) 10 11 12 13 14 15 18 19 21 22 24 34 35 36 37 46 47 51
BOOLVAL (300) 59


Nonterminals, with rules where they appear

$accept (46)
    on left: 0
program (47)
    on left: 1, on right: 0
declarations (48)
    on left: 2 3, on right: 1 2
declaration (49)
    on left: 4 5 6 7, on right: 2 3
export (50)
    on left: 8 9, on right: 5 14 15
funheader (51)
    on left: 10 11 12 13, on right: 4 5 20 23
globaldef (52)
    on left: 14 15, on right: 6
funbody (53)
    on left: 16 17, on right: 5 20 23
localfunvar (54)
    on left: 18 19 20 21 22 23, on right: 16 21 22 23
globaldec (55)
    on left: 24, on right: 7
exprs (56)
    on left: 25 26 27, on right: 25 35
expr (57)
    on left: 28 29 30 31 32 33 34, on right: 15 18 21 25 26 28 32 42
    43 44 45 46 47 48 50 60 61 62 63 64 65 66 67 68 69 70 71 72 73
    74
funcall (58)
    on left: 35, on right: 33 41
param (59)
    on left: 36 37, on right: 10 11 36
statements (60)
    on left: 38 39, on right: 16 17 38 52
statement (61)
    on left: 40 41 42 43 44 45 46 47 48 49, on right: 38 53
assign (62)
    on left: 50, on right: 40
id (63)
    on left: 51, on right: 50
block (64)
    on left: 52 53, on right: 42 43 44 45 46 47
type (65)
    on left: 54 55 56, on right: 11 13 14 15 18 19 21 22 24 32 36 37
constant (66)
    on left: 57 58 59, on right: 30
monop (67)
    on left: 60 61, on right: 31
binop (68)
    on left: 62 63 64 65 66 67 68 69 70 71 72 73 74, on right: 29


State 0

    0 $accept: . program $end

    EXTERN  shift, and go to state 1
    EXPORT  shift, and go to state 2

    $default  reduce using rule 9 (export)

    program       go to state 3
    declarations  go to state 4
    declaration   go to state 5
    export        go to state 6
    globaldef     go to state 7
    globaldec     go to state 8


State 1

    4 declaration: EXTERN . funheader SEMICOLON
   24 globaldec: EXTERN . type ID SEMICOLON

    FLOAT  shift, and go to state 9
    INT    shift, and go to state 10
    BOOL   shift, and go to state 11
    VOID   shift, and go to state 12

    funheader  go to state 13
    type       go to state 14


State 2

    8 export: EXPORT .

    $default  reduce using rule 8 (export)


State 3

    0 $accept: program . $end

    $end  shift, and go to state 15


State 4

    1 program: declarations .

    $default  reduce using rule 1 (program)


State 5

    2 declarations: declaration . declarations
    3             | declaration .

    EXTERN  shift, and go to state 1
    EXPORT  shift, and go to state 2

    $end      reduce using rule 3 (declarations)
    $default  reduce using rule 9 (export)

    declarations  go to state 16
    declaration   go to state 5
    export        go to state 6
    globaldef     go to state 7
    globaldec     go to state 8


State 6

    5 declaration: export . funheader CB_L funbody CB_R
   14 globaldef: export . type ID SEMICOLON
   15          | export . type ID LET expr SEMICOLON

    FLOAT  shift, and go to state 9
    INT    shift, and go to state 10
    BOOL   shift, and go to state 11
    VOID   shift, and go to state 12

    funheader  go to state 17
    type       go to state 18


State 7

    6 declaration: globaldef .

    $default  reduce using rule 6 (declaration)


State 8

    7 declaration: globaldec .

    $default  reduce using rule 7 (declaration)


State 9

   56 type: FLOAT .

    $default  reduce using rule 56 (type)


State 10

   55 type: INT .

    $default  reduce using rule 55 (type)


State 11

   54 type: BOOL .

    $default  reduce using rule 54 (type)


State 12

   10 funheader: VOID . ID BRACKET_L param BRACKET_R
   12          | VOID . ID BRACKET_L BRACKET_R

    ID  shift, and go to state 19


State 13

    4 declaration: EXTERN funheader . SEMICOLON

    SEMICOLON  shift, and go to state 20


State 14

   11 funheader: type . ID BRACKET_L param BRACKET_R
   13          | type . ID BRACKET_L BRACKET_R
   24 globaldec: EXTERN type . ID SEMICOLON

    ID  shift, and go to state 21


State 15

    0 $accept: program $end .

    $default  accept


State 16

    2 declarations: declaration declarations .

    $default  reduce using rule 2 (declarations)


State 17

    5 declaration: export funheader . CB_L funbody CB_R

    CB_L  shift, and go to state 22


State 18

   11 funheader: type . ID BRACKET_L param BRACKET_R
   13          | type . ID BRACKET_L BRACKET_R
   14 globaldef: export type . ID SEMICOLON
   15          | export type . ID LET expr SEMICOLON

    ID  shift, and go to state 23


State 19

   10 funheader: VOID ID . BRACKET_L param BRACKET_R
   12          | VOID ID . BRACKET_L BRACKET_R

    BRACKET_L  shift, and go to state 24


State 20

    4 declaration: EXTERN funheader SEMICOLON .

    $default  reduce using rule 4 (declaration)


State 21

   11 funheader: type ID . BRACKET_L param BRACKET_R
   13          | type ID . BRACKET_L BRACKET_R
   24 globaldec: EXTERN type ID . SEMICOLON

    BRACKET_L  shift, and go to state 25
    SEMICOLON  shift, and go to state 26


State 22

    5 declaration: export funheader CB_L . funbody CB_R

    FLOAT   shift, and go to state 9
    INT     shift, and go to state 10
    BOOL    shift, and go to state 11
    IF      shift, and go to state 27
    DO      shift, and go to state 28
    WHILE   shift, and go to state 29
    FOR     shift, and go to state 30
    VOID    shift, and go to state 12
    RETURN  shift, and go to state 31
    ID      shift, and go to state 32

    $default  reduce using rule 39 (statements)

    funheader    go to state 33
    funbody      go to state 34
    localfunvar  go to state 35
    funcall      go to state 36
    statements   go to state 37
    statement    go to state 38
    assign       go to state 39
    id           go to state 40
    type         go to state 41


State 23

   11 funheader: type ID . BRACKET_L param BRACKET_R
   13          | type ID . BRACKET_L BRACKET_R
   14 globaldef: export type ID . SEMICOLON
   15          | export type ID . LET expr SEMICOLON

    BRACKET_L  shift, and go to state 25
    SEMICOLON  shift, and go to state 42
    LET        shift, and go to state 43


State 24

   10 funheader: VOID ID BRACKET_L . param BRACKET_R
   12          | VOID ID BRACKET_L . BRACKET_R

    BRACKET_R  shift, and go to state 44
    FLOAT      shift, and go to state 9
    INT        shift, and go to state 10
    BOOL       shift, and go to state 11

    param  go to state 45
    type   go to state 46


State 25

   11 funheader: type ID BRACKET_L . param BRACKET_R
   13          | type ID BRACKET_L . BRACKET_R

    BRACKET_R  shift, and go to state 47
    FLOAT      shift, and go to state 9
    INT        shift, and go to state 10
    BOOL       shift, and go to state 11

    param  go to state 48
    type   go to state 46


State 26

   24 globaldec: EXTERN type ID SEMICOLON .

    $default  reduce using rule 24 (globaldec)


State 27

   42 statement: IF . BRACKET_L expr BRACKET_R block
   43          | IF . BRACKET_L expr BRACKET_R block ELSE block

    BRACKET_L  shift, and go to state 49


State 28

   45 statement: DO . block WHILE BRACKET_L expr BRACKET_R SEMICOLON

    CB_L    shift, and go to state 50
    IF      shift, and go to state 27
    DO      shift, and go to state 28
    WHILE   shift, and go to state 29
    FOR     shift, and go to state 30
    RETURN  shift, and go to state 31
    ID      shift, and go to state 32

    funcall    go to state 36
    statement  go to state 51
    assign     go to state 39
    id         go to state 40
    block      go to state 52


State 29

   44 statement: WHILE . BRACKET_L expr BRACKET_R block

    BRACKET_L  shift, and go to state 53


State 30

   46 statement: FOR . BRACKET_L INT ID LET expr COMMA expr COMMA expr BRACKET_R block
   47          | FOR . BRACKET_L INT ID LET expr COMMA expr BRACKET_R block

    BRACKET_L  shift, and go to state 54


State 31

   48 statement: RETURN . expr SEMICOLON
   49          | RETURN . SEMICOLON

    BRACKET_L  shift, and go to state 55
    SEMICOLON  shift, and go to state 56
    MINUS      shift, and go to state 57
    NOT        shift, and go to state 58
    INTVAL     shift, and go to state 59
    FLOATVAL   shift, and go to state 60
    ID         shift, and go to state 61
    BOOLVAL    shift, and go to state 62

    expr      go to state 63
    funcall   go to state 64
    constant  go to state 65
    monop     go to state 66
    binop     go to state 67


State 32

   35 funcall: ID . BRACKET_L exprs BRACKET_R
   51 id: ID .

    BRACKET_L  shift, and go to state 68

    $default  reduce using rule 51 (id)


State 33

   20 localfunvar: funheader . CB_L funbody CB_R
   23            | funheader . CB_L funbody CB_R localfunvar

    CB_L  shift, and go to state 69


State 34

    5 declaration: export funheader CB_L funbody . CB_R

    CB_R  shift, and go to state 70


State 35

   16 funbody: localfunvar . statements

    IF      shift, and go to state 27
    DO      shift, and go to state 28
    WHILE   shift, and go to state 29
    FOR     shift, and go to state 30
    RETURN  shift, and go to state 31
    ID      shift, and go to state 32

    $default  reduce using rule 39 (statements)

    funcall     go to state 36
    statements  go to state 71
    statement   go to state 38
    assign      go to state 39
    id          go to state 40


State 36

   41 statement: funcall . SEMICOLON

    SEMICOLON  shift, and go to state 72


State 37

   17 funbody: statements .

    $default  reduce using rule 17 (funbody)


State 38

   38 statements: statement . statements

    IF      shift, and go to state 27
    DO      shift, and go to state 28
    WHILE   shift, and go to state 29
    FOR     shift, and go to state 30
    RETURN  shift, and go to state 31
    ID      shift, and go to state 32

    $default  reduce using rule 39 (statements)

    funcall     go to state 36
    statements  go to state 73
    statement   go to state 38
    assign      go to state 39
    id          go to state 40


State 39

   40 statement: assign .

    $default  reduce using rule 40 (statement)


State 40

   50 assign: id . LET expr SEMICOLON

    LET  shift, and go to state 74


State 41

   11 funheader: type . ID BRACKET_L param BRACKET_R
   13          | type . ID BRACKET_L BRACKET_R
   18 localfunvar: type . ID LET expr SEMICOLON
   19            | type . ID SEMICOLON
   21            | type . ID LET expr SEMICOLON localfunvar
   22            | type . ID SEMICOLON localfunvar

    ID  shift, and go to state 75


State 42

   14 globaldef: export type ID SEMICOLON .

    $default  reduce using rule 14 (globaldef)


State 43

   15 globaldef: export type ID LET . expr SEMICOLON

    BRACKET_L  shift, and go to state 55
    MINUS      shift, and go to state 57
    NOT        shift, and go to state 58
    INTVAL     shift, and go to state 59
    FLOATVAL   shift, and go to state 60
    ID         shift, and go to state 61
    BOOLVAL    shift, and go to state 62

    expr      go to state 76
    funcall   go to state 64
    constant  go to state 65
    monop     go to state 66
    binop     go to state 67


State 44

   12 funheader: VOID ID BRACKET_L BRACKET_R .

    $default  reduce using rule 12 (funheader)


State 45

   10 funheader: VOID ID BRACKET_L param . BRACKET_R

    BRACKET_R  shift, and go to state 77


State 46

   36 param: type . ID COMMA param
   37      | type . ID

    ID  shift, and go to state 78


State 47

   13 funheader: type ID BRACKET_L BRACKET_R .

    $default  reduce using rule 13 (funheader)


State 48

   11 funheader: type ID BRACKET_L param . BRACKET_R

    BRACKET_R  shift, and go to state 79


State 49

   42 statement: IF BRACKET_L . expr BRACKET_R block
   43          | IF BRACKET_L . expr BRACKET_R block ELSE block

    BRACKET_L  shift, and go to state 55
    MINUS      shift, and go to state 57
    NOT        shift, and go to state 58
    INTVAL     shift, and go to state 59
    FLOATVAL   shift, and go to state 60
    ID         shift, and go to state 61
    BOOLVAL    shift, and go to state 62

    expr      go to state 80
    funcall   go to state 64
    constant  go to state 65
    monop     go to state 66
    binop     go to state 67


State 50

   52 block: CB_L . statements CB_R

    IF      shift, and go to state 27
    DO      shift, and go to state 28
    WHILE   shift, and go to state 29
    FOR     shift, and go to state 30
    RETURN  shift, and go to state 31
    ID      shift, and go to state 32

    $default  reduce using rule 39 (statements)

    funcall     go to state 36
    statements  go to state 81
    statement   go to state 38
    assign      go to state 39
    id          go to state 40


State 51

   53 block: statement .

    $default  reduce using rule 53 (block)


State 52

   45 statement: DO block . WHILE BRACKET_L expr BRACKET_R SEMICOLON

    WHILE  shift, and go to state 82


State 53

   44 statement: WHILE BRACKET_L . expr BRACKET_R block

    BRACKET_L  shift, and go to state 55
    MINUS      shift, and go to state 57
    NOT        shift, and go to state 58
    INTVAL     shift, and go to state 59
    FLOATVAL   shift, and go to state 60
    ID         shift, and go to state 61
    BOOLVAL    shift, and go to state 62

    expr      go to state 83
    funcall   go to state 64
    constant  go to state 65
    monop     go to state 66
    binop     go to state 67


State 54

   46 statement: FOR BRACKET_L . INT ID LET expr COMMA expr COMMA expr BRACKET_R block
   47          | FOR BRACKET_L . INT ID LET expr COMMA expr BRACKET_R block

    INT  shift, and go to state 84


State 55

   28 expr: BRACKET_L . expr BRACKET_R
   32     | BRACKET_L . type BRACKET_R expr

    BRACKET_L  shift, and go to state 55
    MINUS      shift, and go to state 57
    NOT        shift, and go to state 58
    FLOAT      shift, and go to state 9
    INT        shift, and go to state 10
    BOOL       shift, and go to state 11
    INTVAL     shift, and go to state 59
    FLOATVAL   shift, and go to state 60
    ID         shift, and go to state 61
    BOOLVAL    shift, and go to state 62

    expr      go to state 85
    funcall   go to state 64
    type      go to state 86
    constant  go to state 65
    monop     go to state 66
    binop     go to state 67


State 56

   49 statement: RETURN SEMICOLON .

    $default  reduce using rule 49 (statement)


State 57

   60 monop: MINUS . expr

    BRACKET_L  shift, and go to state 55
    MINUS      shift, and go to state 57
    NOT        shift, and go to state 58
    INTVAL     shift, and go to state 59
    FLOATVAL   shift, and go to state 60
    ID         shift, and go to state 61
    BOOLVAL    shift, and go to state 62

    expr      go to state 87
    funcall   go to state 64
    constant  go to state 65
    monop     go to state 66
    binop     go to state 67


State 58

   61 monop: NOT . expr

    BRACKET_L  shift, and go to state 55
    MINUS      shift, and go to state 57
    NOT        shift, and go to state 58
    INTVAL     shift, and go to state 59
    FLOATVAL   shift, and go to state 60
    ID         shift, and go to state 61
    BOOLVAL    shift, and go to state 62

    expr      go to state 88
    funcall   go to state 64
    constant  go to state 65
    monop     go to state 66
    binop     go to state 67


State 59

   58 constant: INTVAL .

    $default  reduce using rule 58 (constant)


State 60

   57 constant: FLOATVAL .

    $default  reduce using rule 57 (constant)


State 61

   34 expr: ID .
   35 funcall: ID . BRACKET_L exprs BRACKET_R

    BRACKET_L  shift, and go to state 68

    $default  reduce using rule 34 (expr)


State 62

   59 constant: BOOLVAL .

    $default  reduce using rule 59 (constant)


State 63

   48 statement: RETURN expr . SEMICOLON
   62 binop: expr . PLUS expr
   63      | expr . MINUS expr
   64      | expr . STAR expr
   65      | expr . SLASH expr
   66      | expr . PERCENT expr
   67      | expr . LE expr
   68      | expr . LT expr
   69      | expr . GE expr
   70      | expr . GT expr
   71      | expr . EQ expr
   72      | expr . NE expr
   73      | expr . OR expr
   74      | expr . AND expr

    SEMICOLON  shift, and go to state 89
    MINUS      shift, and go to state 90
    PLUS       shift, and go to state 91
    STAR       shift, and go to state 92
    SLASH      shift, and go to state 93
    PERCENT    shift, and go to state 94
    LE         shift, and go to state 95
    LT         shift, and go to state 96
    GE         shift, and go to state 97
    GT         shift, and go to state 98
    EQ         shift, and go to state 99
    NE         shift, and go to state 100
    OR         shift, and go to state 101
    AND        shift, and go to state 102


State 64

   33 expr: funcall .

    $default  reduce using rule 33 (expr)


State 65

   30 expr: constant .

    $default  reduce using rule 30 (expr)


State 66

   31 expr: monop .

    $default  reduce using rule 31 (expr)


State 67

   29 expr: binop .

    $default  reduce using rule 29 (expr)


State 68

   35 funcall: ID BRACKET_L . exprs BRACKET_R

    BRACKET_L  shift, and go to state 55
    MINUS      shift, and go to state 57
    NOT        shift, and go to state 58
    INTVAL     shift, and go to state 59
    FLOATVAL   shift, and go to state 60
    ID         shift, and go to state 61
    BOOLVAL    shift, and go to state 62

    $default  reduce using rule 27 (exprs)

    exprs     go to state 103
    expr      go to state 104
    funcall   go to state 64
    constant  go to state 65
    monop     go to state 66
    binop     go to state 67


State 69

   20 localfunvar: funheader CB_L . funbody CB_R
   23            | funheader CB_L . funbody CB_R localfunvar

    FLOAT   shift, and go to state 9
    INT     shift, and go to state 10
    BOOL    shift, and go to state 11
    IF      shift, and go to state 27
    DO      shift, and go to state 28
    WHILE   shift, and go to state 29
    FOR     shift, and go to state 30
    VOID    shift, and go to state 12
    RETURN  shift, and go to state 31
    ID      shift, and go to state 32

    $default  reduce using rule 39 (statements)

    funheader    go to state 33
    funbody      go to state 105
    localfunvar  go to state 35
    funcall      go to state 36
    statements   go to state 37
    statement    go to state 38
    assign       go to state 39
    id           go to state 40
    type         go to state 41


State 70

    5 declaration: export funheader CB_L funbody CB_R .

    $default  reduce using rule 5 (declaration)


State 71

   16 funbody: localfunvar statements .

    $default  reduce using rule 16 (funbody)


State 72

   41 statement: funcall SEMICOLON .

    $default  reduce using rule 41 (statement)


State 73

   38 statements: statement statements .

    $default  reduce using rule 38 (statements)


State 74

   50 assign: id LET . expr SEMICOLON

    BRACKET_L  shift, and go to state 55
    MINUS      shift, and go to state 57
    NOT        shift, and go to state 58
    INTVAL     shift, and go to state 59
    FLOATVAL   shift, and go to state 60
    ID         shift, and go to state 61
    BOOLVAL    shift, and go to state 62

    expr      go to state 106
    funcall   go to state 64
    constant  go to state 65
    monop     go to state 66
    binop     go to state 67


State 75

   11 funheader: type ID . BRACKET_L param BRACKET_R
   13          | type ID . BRACKET_L BRACKET_R
   18 localfunvar: type ID . LET expr SEMICOLON
   19            | type ID . SEMICOLON
   21            | type ID . LET expr SEMICOLON localfunvar
   22            | type ID . SEMICOLON localfunvar

    BRACKET_L  shift, and go to state 25
    SEMICOLON  shift, and go to state 107
    LET        shift, and go to state 108


State 76

   15 globaldef: export type ID LET expr . SEMICOLON
   62 binop: expr . PLUS expr
   63      | expr . MINUS expr
   64      | expr . STAR expr
   65      | expr . SLASH expr
   66      | expr . PERCENT expr
   67      | expr . LE expr
   68      | expr . LT expr
   69      | expr . GE expr
   70      | expr . GT expr
   71      | expr . EQ expr
   72      | expr . NE expr
   73      | expr . OR expr
   74      | expr . AND expr

    SEMICOLON  shift, and go to state 109
    MINUS      shift, and go to state 90
    PLUS       shift, and go to state 91
    STAR       shift, and go to state 92
    SLASH      shift, and go to state 93
    PERCENT    shift, and go to state 94
    LE         shift, and go to state 95
    LT         shift, and go to state 96
    GE         shift, and go to state 97
    GT         shift, and go to state 98
    EQ         shift, and go to state 99
    NE         shift, and go to state 100
    OR         shift, and go to state 101
    AND        shift, and go to state 102


State 77

   10 funheader: VOID ID BRACKET_L param BRACKET_R .

    $default  reduce using rule 10 (funheader)


State 78

   36 param: type ID . COMMA param
   37      | type ID .

    COMMA  shift, and go to state 110

    $default  reduce using rule 37 (param)


State 79

   11 funheader: type ID BRACKET_L param BRACKET_R .

    $default  reduce using rule 11 (funheader)


State 80

   42 statement: IF BRACKET_L expr . BRACKET_R block
   43          | IF BRACKET_L expr . BRACKET_R block ELSE block
   62 binop: expr . PLUS expr
   63      | expr . MINUS expr
   64      | expr . STAR expr
   65      | expr . SLASH expr
   66      | expr . PERCENT expr
   67      | expr . LE expr
   68      | expr . LT expr
   69      | expr . GE expr
   70      | expr . GT expr
   71      | expr . EQ expr
   72      | expr . NE expr
   73      | expr . OR expr
   74      | expr . AND expr

    BRACKET_R  shift, and go to state 111
    MINUS      shift, and go to state 90
    PLUS       shift, and go to state 91
    STAR       shift, and go to state 92
    SLASH      shift, and go to state 93
    PERCENT    shift, and go to state 94
    LE         shift, and go to state 95
    LT         shift, and go to state 96
    GE         shift, and go to state 97
    GT         shift, and go to state 98
    EQ         shift, and go to state 99
    NE         shift, and go to state 100
    OR         shift, and go to state 101
    AND        shift, and go to state 102


State 81

   52 block: CB_L statements . CB_R

    CB_R  shift, and go to state 112


State 82

   45 statement: DO block WHILE . BRACKET_L expr BRACKET_R SEMICOLON

    BRACKET_L  shift, and go to state 113


State 83

   44 statement: WHILE BRACKET_L expr . BRACKET_R block
   62 binop: expr . PLUS expr
   63      | expr . MINUS expr
   64      | expr . STAR expr
   65      | expr . SLASH expr
   66      | expr . PERCENT expr
   67      | expr . LE expr
   68      | expr . LT expr
   69      | expr . GE expr
   70      | expr . GT expr
   71      | expr . EQ expr
   72      | expr . NE expr
   73      | expr . OR expr
   74      | expr . AND expr

    BRACKET_R  shift, and go to state 114
    MINUS      shift, and go to state 90
    PLUS       shift, and go to state 91
    STAR       shift, and go to state 92
    SLASH      shift, and go to state 93
    PERCENT    shift, and go to state 94
    LE         shift, and go to state 95
    LT         shift, and go to state 96
    GE         shift, and go to state 97
    GT         shift, and go to state 98
    EQ         shift, and go to state 99
    NE         shift, and go to state 100
    OR         shift, and go to state 101
    AND        shift, and go to state 102


State 84

   46 statement: FOR BRACKET_L INT . ID LET expr COMMA expr COMMA expr BRACKET_R block
   47          | FOR BRACKET_L INT . ID LET expr COMMA expr BRACKET_R block

    ID  shift, and go to state 115


State 85

   28 expr: BRACKET_L expr . BRACKET_R
   62 binop: expr . PLUS expr
   63      | expr . MINUS expr
   64      | expr . STAR expr
   65      | expr . SLASH expr
   66      | expr . PERCENT expr
   67      | expr . LE expr
   68      | expr . LT expr
   69      | expr . GE expr
   70      | expr . GT expr
   71      | expr . EQ expr
   72      | expr . NE expr
   73      | expr . OR expr
   74      | expr . AND expr

    BRACKET_R  shift, and go to state 116
    MINUS      shift, and go to state 90
    PLUS       shift, and go to state 91
    STAR       shift, and go to state 92
    SLASH      shift, and go to state 93
    PERCENT    shift, and go to state 94
    LE         shift, and go to state 95
    LT         shift, and go to state 96
    GE         shift, and go to state 97
    GT         shift, and go to state 98
    EQ         shift, and go to state 99
    NE         shift, and go to state 100
    OR         shift, and go to state 101
    AND        shift, and go to state 102


State 86

   32 expr: BRACKET_L type . BRACKET_R expr

    BRACKET_R  shift, and go to state 117


State 87

   60 monop: MINUS expr .
   62 binop: expr . PLUS expr
   63      | expr . MINUS expr
   64      | expr . STAR expr
   65      | expr . SLASH expr
   66      | expr . PERCENT expr
   67      | expr . LE expr
   68      | expr . LT expr
   69      | expr . GE expr
   70      | expr . GT expr
   71      | expr . EQ expr
   72      | expr . NE expr
   73      | expr . OR expr
   74      | expr . AND expr

    STAR     shift, and go to state 92
    SLASH    shift, and go to state 93
    PERCENT  shift, and go to state 94

    $default  reduce using rule 60 (monop)


State 88

   61 monop: NOT expr .
   62 binop: expr . PLUS expr
   63      | expr . MINUS expr
   64      | expr . STAR expr
   65      | expr . SLASH expr
   66      | expr . PERCENT expr
   67      | expr . LE expr
   68      | expr . LT expr
   69      | expr . GE expr
   70      | expr . GT expr
   71      | expr . EQ expr
   72      | expr . NE expr
   73      | expr . OR expr
   74      | expr . AND expr

    $default  reduce using rule 61 (monop)


State 89

   48 statement: RETURN expr SEMICOLON .

    $default  reduce using rule 48 (statement)


State 90

   63 binop: expr MINUS . expr

    BRACKET_L  shift, and go to state 55
    MINUS      shift, and go to state 57
    NOT        shift, and go to state 58
    INTVAL     shift, and go to state 59
    FLOATVAL   shift, and go to state 60
    ID         shift, and go to state 61
    BOOLVAL    shift, and go to state 62

    expr      go to state 118
    funcall   go to state 64
    constant  go to state 65
    monop     go to state 66
    binop     go to state 67


State 91

   62 binop: expr PLUS . expr

    BRACKET_L  shift, and go to state 55
    MINUS      shift, and go to state 57
    NOT        shift, and go to state 58
    INTVAL     shift, and go to state 59
    FLOATVAL   shift, and go to state 60
    ID         shift, and go to state 61
    BOOLVAL    shift, and go to state 62

    expr      go to state 119
    funcall   go to state 64
    constant  go to state 65
    monop     go to state 66
    binop     go to state 67


State 92

   64 binop: expr STAR . expr

    BRACKET_L  shift, and go to state 55
    MINUS      shift, and go to state 57
    NOT        shift, and go to state 58
    INTVAL     shift, and go to state 59
    FLOATVAL   shift, and go to state 60
    ID         shift, and go to state 61
    BOOLVAL    shift, and go to state 62

    expr      go to state 120
    funcall   go to state 64
    constant  go to state 65
    monop     go to state 66
    binop     go to state 67


State 93

   65 binop: expr SLASH . expr

    BRACKET_L  shift, and go to state 55
    MINUS      shift, and go to state 57
    NOT        shift, and go to state 58
    INTVAL     shift, and go to state 59
    FLOATVAL   shift, and go to state 60
    ID         shift, and go to state 61
    BOOLVAL    shift, and go to state 62

    expr      go to state 121
    funcall   go to state 64
    constant  go to state 65
    monop     go to state 66
    binop     go to state 67


State 94

   66 binop: expr PERCENT . expr

    BRACKET_L  shift, and go to state 55
    MINUS      shift, and go to state 57
    NOT        shift, and go to state 58
    INTVAL     shift, and go to state 59
    FLOATVAL   shift, and go to state 60
    ID         shift, and go to state 61
    BOOLVAL    shift, and go to state 62

    expr      go to state 122
    funcall   go to state 64
    constant  go to state 65
    monop     go to state 66
    binop     go to state 67


State 95

   67 binop: expr LE . expr

    BRACKET_L  shift, and go to state 55
    MINUS      shift, and go to state 57
    NOT        shift, and go to state 58
    INTVAL     shift, and go to state 59
    FLOATVAL   shift, and go to state 60
    ID         shift, and go to state 61
    BOOLVAL    shift, and go to state 62

    expr      go to state 123
    funcall   go to state 64
    constant  go to state 65
    monop     go to state 66
    binop     go to state 67


State 96

   68 binop: expr LT . expr

    BRACKET_L  shift, and go to state 55
    MINUS      shift, and go to state 57
    NOT        shift, and go to state 58
    INTVAL     shift, and go to state 59
    FLOATVAL   shift, and go to state 60
    ID         shift, and go to state 61
    BOOLVAL    shift, and go to state 62

    expr      go to state 124
    funcall   go to state 64
    constant  go to state 65
    monop     go to state 66
    binop     go to state 67


State 97

   69 binop: expr GE . expr

    BRACKET_L  shift, and go to state 55
    MINUS      shift, and go to state 57
    NOT        shift, and go to state 58
    INTVAL     shift, and go to state 59
    FLOATVAL   shift, and go to state 60
    ID         shift, and go to state 61
    BOOLVAL    shift, and go to state 62

    expr      go to state 125
    funcall   go to state 64
    constant  go to state 65
    monop     go to state 66
    binop     go to state 67


State 98

   70 binop: expr GT . expr

    BRACKET_L  shift, and go to state 55
    MINUS      shift, and go to state 57
    NOT        shift, and go to state 58
    INTVAL     shift, and go to state 59
    FLOATVAL   shift, and go to state 60
    ID         shift, and go to state 61
    BOOLVAL    shift, and go to state 62

    expr      go to state 126
    funcall   go to state 64
    constant  go to state 65
    monop     go to state 66
    binop     go to state 67


State 99

   71 binop: expr EQ . expr

    BRACKET_L  shift, and go to state 55
    MINUS      shift, and go to state 57
    NOT        shift, and go to state 58
    INTVAL     shift, and go to state 59
    FLOATVAL   shift, and go to state 60
    ID         shift, and go to state 61
    BOOLVAL    shift, and go to state 62

    expr      go to state 127
    funcall   go to state 64
    constant  go to state 65
    monop     go to state 66
    binop     go to state 67


State 100

   72 binop: expr NE . expr

    BRACKET_L  shift, and go to state 55
    MINUS      shift, and go to state 57
    NOT        shift, and go to state 58
    INTVAL     shift, and go to state 59
    FLOATVAL   shift, and go to state 60
    ID         shift, and go to state 61
    BOOLVAL    shift, and go to state 62

    expr      go to state 128
    funcall   go to state 64
    constant  go to state 65
    monop     go to state 66
    binop     go to state 67


State 101

   73 binop: expr OR . expr

    BRACKET_L  shift, and go to state 55
    MINUS      shift, and go to state 57
    NOT        shift, and go to state 58
    INTVAL     shift, and go to state 59
    FLOATVAL   shift, and go to state 60
    ID         shift, and go to state 61
    BOOLVAL    shift, and go to state 62

    expr      go to state 129
    funcall   go to state 64
    constant  go to state 65
    monop     go to state 66
    binop     go to state 67


State 102

   74 binop: expr AND . expr

    BRACKET_L  shift, and go to state 55
    MINUS      shift, and go to state 57
    NOT        shift, and go to state 58
    INTVAL     shift, and go to state 59
    FLOATVAL   shift, and go to state 60
    ID         shift, and go to state 61
    BOOLVAL    shift, and go to state 62

    expr      go to state 130
    funcall   go to state 64
    constant  go to state 65
    monop     go to state 66
    binop     go to state 67


State 103

   35 funcall: ID BRACKET_L exprs . BRACKET_R

    BRACKET_R  shift, and go to state 131


State 104

   25 exprs: expr . COMMA exprs
   26      | expr .
   62 binop: expr . PLUS expr
   63      | expr . MINUS expr
   64      | expr . STAR expr
   65      | expr . SLASH expr
   66      | expr . PERCENT expr
   67      | expr . LE expr
   68      | expr . LT expr
   69      | expr . GE expr
   70      | expr . GT expr
   71      | expr . EQ expr
   72      | expr . NE expr
   73      | expr . OR expr
   74      | expr . AND expr

    COMMA    shift, and go to state 132
    MINUS    shift, and go to state 90
    PLUS     shift, and go to state 91
    STAR     shift, and go to state 92
    SLASH    shift, and go to state 93
    PERCENT  shift, and go to state 94
    LE       shift, and go to state 95
    LT       shift, and go to state 96
    GE       shift, and go to state 97
    GT       shift, and go to state 98
    EQ       shift, and go to state 99
    NE       shift, and go to state 100
    OR       shift, and go to state 101
    AND      shift, and go to state 102

    $default  reduce using rule 26 (exprs)


State 105

   20 localfunvar: funheader CB_L funbody . CB_R
   23            | funheader CB_L funbody . CB_R localfunvar

    CB_R  shift, and go to state 133


State 106

   50 assign: id LET expr . SEMICOLON
   62 binop: expr . PLUS expr
   63      | expr . MINUS expr
   64      | expr . STAR expr
   65      | expr . SLASH expr
   66      | expr . PERCENT expr
   67      | expr . LE expr
   68      | expr . LT expr
   69      | expr . GE expr
   70      | expr . GT expr
   71      | expr . EQ expr
   72      | expr . NE expr
   73      | expr . OR expr
   74      | expr . AND expr

    SEMICOLON  shift, and go to state 134
    MINUS      shift, and go to state 90
    PLUS       shift, and go to state 91
    STAR       shift, and go to state 92
    SLASH      shift, and go to state 93
    PERCENT    shift, and go to state 94
    LE         shift, and go to state 95
    LT         shift, and go to state 96
    GE         shift, and go to state 97
    GT         shift, and go to state 98
    EQ         shift, and go to state 99
    NE         shift, and go to state 100
    OR         shift, and go to state 101
    AND        shift, and go to state 102


State 107

   19 localfunvar: type ID SEMICOLON .
   22            | type ID SEMICOLON . localfunvar

    FLOAT  shift, and go to state 9
    INT    shift, and go to state 10
    BOOL   shift, and go to state 11
    VOID   shift, and go to state 12

    $default  reduce using rule 19 (localfunvar)

    funheader    go to state 33
    localfunvar  go to state 135
    type         go to state 41


State 108

   18 localfunvar: type ID LET . expr SEMICOLON
   21            | type ID LET . expr SEMICOLON localfunvar

    BRACKET_L  shift, and go to state 55
    MINUS      shift, and go to state 57
    NOT        shift, and go to state 58
    INTVAL     shift, and go to state 59
    FLOATVAL   shift, and go to state 60
    ID         shift, and go to state 61
    BOOLVAL    shift, and go to state 62

    expr      go to state 136
    funcall   go to state 64
    constant  go to state 65
    monop     go to state 66
    binop     go to state 67


State 109

   15 globaldef: export type ID LET expr SEMICOLON .

    $default  reduce using rule 15 (globaldef)


State 110

   36 param: type ID COMMA . param

    FLOAT  shift, and go to state 9
    INT    shift, and go to state 10
    BOOL   shift, and go to state 11

    param  go to state 137
    type   go to state 46


State 111

   42 statement: IF BRACKET_L expr BRACKET_R . block
   43          | IF BRACKET_L expr BRACKET_R . block ELSE block

    CB_L    shift, and go to state 50
    IF      shift, and go to state 27
    DO      shift, and go to state 28
    WHILE   shift, and go to state 29
    FOR     shift, and go to state 30
    RETURN  shift, and go to state 31
    ID      shift, and go to state 32

    funcall    go to state 36
    statement  go to state 51
    assign     go to state 39
    id         go to state 40
    block      go to state 138


State 112

   52 block: CB_L statements CB_R .

    $default  reduce using rule 52 (block)


State 113

   45 statement: DO block WHILE BRACKET_L . expr BRACKET_R SEMICOLON

    BRACKET_L  shift, and go to state 55
    MINUS      shift, and go to state 57
    NOT        shift, and go to state 58
    INTVAL     shift, and go to state 59
    FLOATVAL   shift, and go to state 60
    ID         shift, and go to state 61
    BOOLVAL    shift, and go to state 62

    expr      go to state 139
    funcall   go to state 64
    constant  go to state 65
    monop     go to state 66
    binop     go to state 67


State 114

   44 statement: WHILE BRACKET_L expr BRACKET_R . block

    CB_L    shift, and go to state 50
    IF      shift, and go to state 27
    DO      shift, and go to state 28
    WHILE   shift, and go to state 29
    FOR     shift, and go to state 30
    RETURN  shift, and go to state 31
    ID      shift, and go to state 32

    funcall    go to state 36
    statement  go to state 51
    assign     go to state 39
    id         go to state 40
    block      go to state 140


State 115

   46 statement: FOR BRACKET_L INT ID . LET expr COMMA expr COMMA expr BRACKET_R block
   47          | FOR BRACKET_L INT ID . LET expr COMMA expr BRACKET_R block

    LET  shift, and go to state 141


State 116

   28 expr: BRACKET_L expr BRACKET_R .

    $default  reduce using rule 28 (expr)


State 117

   32 expr: BRACKET_L type BRACKET_R . expr

    BRACKET_L  shift, and go to state 55
    MINUS      shift, and go to state 57
    NOT        shift, and go to state 58
    INTVAL     shift, and go to state 59
    FLOATVAL   shift, and go to state 60
    ID         shift, and go to state 61
    BOOLVAL    shift, and go to state 62

    expr      go to state 142
    funcall   go to state 64
    constant  go to state 65
    monop     go to state 66
    binop     go to state 67


State 118

   62 binop: expr . PLUS expr
   63      | expr . MINUS expr
   63      | expr MINUS expr .
   64      | expr . STAR expr
   65      | expr . SLASH expr
   66      | expr . PERCENT expr
   67      | expr . LE expr
   68      | expr . LT expr
   69      | expr . GE expr
   70      | expr . GT expr
   71      | expr . EQ expr
   72      | expr . NE expr
   73      | expr . OR expr
   74      | expr . AND expr

    STAR     shift, and go to state 92
    SLASH    shift, and go to state 93
    PERCENT  shift, and go to state 94

    $default  reduce using rule 63 (binop)


State 119

   62 binop: expr . PLUS expr
   62      | expr PLUS expr .
   63      | expr . MINUS expr
   64      | expr . STAR expr
   65      | expr . SLASH expr
   66      | expr . PERCENT expr
   67      | expr . LE expr
   68      | expr . LT expr
   69      | expr . GE expr
   70      | expr . GT expr
   71      | expr . EQ expr
   72      | expr . NE expr
   73      | expr . OR expr
   74      | expr . AND expr

    STAR     shift, and go to state 92
    SLASH    shift, and go to state 93
    PERCENT  shift, and go to state 94

    $default  reduce using rule 62 (binop)


State 120

   62 binop: expr . PLUS expr
   63      | expr . MINUS expr
   64      | expr . STAR expr
   64      | expr STAR expr .
   65      | expr . SLASH expr
   66      | expr . PERCENT expr
   67      | expr . LE expr
   68      | expr . LT expr
   69      | expr . GE expr
   70      | expr . GT expr
   71      | expr . EQ expr
   72      | expr . NE expr
   73      | expr . OR expr
   74      | expr . AND expr

    $default  reduce using rule 64 (binop)


State 121

   62 binop: expr . PLUS expr
   63      | expr . MINUS expr
   64      | expr . STAR expr
   65      | expr . SLASH expr
   65      | expr SLASH expr .
   66      | expr . PERCENT expr
   67      | expr . LE expr
   68      | expr . LT expr
   69      | expr . GE expr
   70      | expr . GT expr
   71      | expr . EQ expr
   72      | expr . NE expr
   73      | expr . OR expr
   74      | expr . AND expr

    $default  reduce using rule 65 (binop)


State 122

   62 binop: expr . PLUS expr
   63      | expr . MINUS expr
   64      | expr . STAR expr
   65      | expr . SLASH expr
   66      | expr . PERCENT expr
   66      | expr PERCENT expr .
   67      | expr . LE expr
   68      | expr . LT expr
   69      | expr . GE expr
   70      | expr . GT expr
   71      | expr . EQ expr
   72      | expr . NE expr
   73      | expr . OR expr
   74      | expr . AND expr

    $default  reduce using rule 66 (binop)


State 123

   62 binop: expr . PLUS expr
   63      | expr . MINUS expr
   64      | expr . STAR expr
   65      | expr . SLASH expr
   66      | expr . PERCENT expr
   67      | expr . LE expr
   67      | expr LE expr .
   68      | expr . LT expr
   69      | expr . GE expr
   70      | expr . GT expr
   71      | expr . EQ expr
   72      | expr . NE expr
   73      | expr . OR expr
   74      | expr . AND expr

    MINUS    shift, and go to state 90
    PLUS     shift, and go to state 91
    STAR     shift, and go to state 92
    SLASH    shift, and go to state 93
    PERCENT  shift, and go to state 94

    $default  reduce using rule 67 (binop)


State 124

   62 binop: expr . PLUS expr
   63      | expr . MINUS expr
   64      | expr . STAR expr
   65      | expr . SLASH expr
   66      | expr . PERCENT expr
   67      | expr . LE expr
   68      | expr . LT expr
   68      | expr LT expr .
   69      | expr . GE expr
   70      | expr . GT expr
   71      | expr . EQ expr
   72      | expr . NE expr
   73      | expr . OR expr
   74      | expr . AND expr

    MINUS    shift, and go to state 90
    PLUS     shift, and go to state 91
    STAR     shift, and go to state 92
    SLASH    shift, and go to state 93
    PERCENT  shift, and go to state 94

    $default  reduce using rule 68 (binop)


State 125

   62 binop: expr . PLUS expr
   63      | expr . MINUS expr
   64      | expr . STAR expr
   65      | expr . SLASH expr
   66      | expr . PERCENT expr
   67      | expr . LE expr
   68      | expr . LT expr
   69      | expr . GE expr
   69      | expr GE expr .
   70      | expr . GT expr
   71      | expr . EQ expr
   72      | expr . NE expr
   73      | expr . OR expr
   74      | expr . AND expr

    MINUS    shift, and go to state 90
    PLUS     shift, and go to state 91
    STAR     shift, and go to state 92
    SLASH    shift, and go to state 93
    PERCENT  shift, and go to state 94

    $default  reduce using rule 69 (binop)


State 126

   62 binop: expr . PLUS expr
   63      | expr . MINUS expr
   64      | expr . STAR expr
   65      | expr . SLASH expr
   66      | expr . PERCENT expr
   67      | expr . LE expr
   68      | expr . LT expr
   69      | expr . GE expr
   70      | expr . GT expr
   70      | expr GT expr .
   71      | expr . EQ expr
   72      | expr . NE expr
   73      | expr . OR expr
   74      | expr . AND expr

    MINUS    shift, and go to state 90
    PLUS     shift, and go to state 91
    STAR     shift, and go to state 92
    SLASH    shift, and go to state 93
    PERCENT  shift, and go to state 94

    $default  reduce using rule 70 (binop)


State 127

   62 binop: expr . PLUS expr
   63      | expr . MINUS expr
   64      | expr . STAR expr
   65      | expr . SLASH expr
   66      | expr . PERCENT expr
   67      | expr . LE expr
   68      | expr . LT expr
   69      | expr . GE expr
   70      | expr . GT expr
   71      | expr . EQ expr
   71      | expr EQ expr .
   72      | expr . NE expr
   73      | expr . OR expr
   74      | expr . AND expr

    MINUS    shift, and go to state 90
    PLUS     shift, and go to state 91
    STAR     shift, and go to state 92
    SLASH    shift, and go to state 93
    PERCENT  shift, and go to state 94
    LE       shift, and go to state 95
    LT       shift, and go to state 96
    GE       shift, and go to state 97
    GT       shift, and go to state 98

    $default  reduce using rule 71 (binop)


State 128

   62 binop: expr . PLUS expr
   63      | expr . MINUS expr
   64      | expr . STAR expr
   65      | expr . SLASH expr
   66      | expr . PERCENT expr
   67      | expr . LE expr
   68      | expr . LT expr
   69      | expr . GE expr
   70      | expr . GT expr
   71      | expr . EQ expr
   72      | expr . NE expr
   72      | expr NE expr .
   73      | expr . OR expr
   74      | expr . AND expr

    MINUS    shift, and go to state 90
    PLUS     shift, and go to state 91
    STAR     shift, and go to state 92
    SLASH    shift, and go to state 93
    PERCENT  shift, and go to state 94
    LE       shift, and go to state 95
    LT       shift, and go to state 96
    GE       shift, and go to state 97
    GT       shift, and go to state 98

    $default  reduce using rule 72 (binop)


State 129

   62 binop: expr . PLUS expr
   63      | expr . MINUS expr
   64      | expr . STAR expr
   65      | expr . SLASH expr
   66      | expr . PERCENT expr
   67      | expr . LE expr
   68      | expr . LT expr
   69      | expr . GE expr
   70      | expr . GT expr
   71      | expr . EQ expr
   72      | expr . NE expr
   73      | expr . OR expr
   73      | expr OR expr .
   74      | expr . AND expr

    MINUS    shift, and go to state 90
    PLUS     shift, and go to state 91
    STAR     shift, and go to state 92
    SLASH    shift, and go to state 93
    PERCENT  shift, and go to state 94
    LE       shift, and go to state 95
    LT       shift, and go to state 96
    GE       shift, and go to state 97
    GT       shift, and go to state 98
    EQ       shift, and go to state 99
    NE       shift, and go to state 100
    AND      shift, and go to state 102

    $default  reduce using rule 73 (binop)


State 130

   62 binop: expr . PLUS expr
   63      | expr . MINUS expr
   64      | expr . STAR expr
   65      | expr . SLASH expr
   66      | expr . PERCENT expr
   67      | expr . LE expr
   68      | expr . LT expr
   69      | expr . GE expr
   70      | expr . GT expr
   71      | expr . EQ expr
   72      | expr . NE expr
   73      | expr . OR expr
   74      | expr . AND expr
   74      | expr AND expr .

    MINUS    shift, and go to state 90
    PLUS     shift, and go to state 91
    STAR     shift, and go to state 92
    SLASH    shift, and go to state 93
    PERCENT  shift, and go to state 94
    LE       shift, and go to state 95
    LT       shift, and go to state 96
    GE       shift, and go to state 97
    GT       shift, and go to state 98
    EQ       shift, and go to state 99
    NE       shift, and go to state 100

    $default  reduce using rule 74 (binop)


State 131

   35 funcall: ID BRACKET_L exprs BRACKET_R .

    $default  reduce using rule 35 (funcall)


State 132

   25 exprs: expr COMMA . exprs

    BRACKET_L  shift, and go to state 55
    MINUS      shift, and go to state 57
    NOT        shift, and go to state 58
    INTVAL     shift, and go to state 59
    FLOATVAL   shift, and go to state 60
    ID         shift, and go to state 61
    BOOLVAL    shift, and go to state 62

    $default  reduce using rule 27 (exprs)

    exprs     go to state 143
    expr      go to state 104
    funcall   go to state 64
    constant  go to state 65
    monop     go to state 66
    binop     go to state 67


State 133

   20 localfunvar: funheader CB_L funbody CB_R .
   23            | funheader CB_L funbody CB_R . localfunvar

    FLOAT  shift, and go to state 9
    INT    shift, and go to state 10
    BOOL   shift, and go to state 11
    VOID   shift, and go to state 12

    $default  reduce using rule 20 (localfunvar)

    funheader    go to state 33
    localfunvar  go to state 144
    type         go to state 41


State 134

   50 assign: id LET expr SEMICOLON .

    $default  reduce using rule 50 (assign)


State 135

   22 localfunvar: type ID SEMICOLON localfunvar .

    $default  reduce using rule 22 (localfunvar)


State 136

   18 localfunvar: type ID LET expr . SEMICOLON
   21            | type ID LET expr . SEMICOLON localfunvar
   62 binop: expr . PLUS expr
   63      | expr . MINUS expr
   64      | expr . STAR expr
   65      | expr . SLASH expr
   66      | expr . PERCENT expr
   67      | expr . LE expr
   68      | expr . LT expr
   69      | expr . GE expr
   70      | expr . GT expr
   71      | expr . EQ expr
   72      | expr . NE expr
   73      | expr . OR expr
   74      | expr . AND expr

    SEMICOLON  shift, and go to state 145
    MINUS      shift, and go to state 90
    PLUS       shift, and go to state 91
    STAR       shift, and go to state 92
    SLASH      shift, and go to state 93
    PERCENT    shift, and go to state 94
    LE         shift, and go to state 95
    LT         shift, and go to state 96
    GE         shift, and go to state 97
    GT         shift, and go to state 98
    EQ         shift, and go to state 99
    NE         shift, and go to state 100
    OR         shift, and go to state 101
    AND        shift, and go to state 102


State 137

   36 param: type ID COMMA param .

    $default  reduce using rule 36 (param)


State 138

   42 statement: IF BRACKET_L expr BRACKET_R block .
   43          | IF BRACKET_L expr BRACKET_R block . ELSE block

    ELSE  shift, and go to state 146

    $default  reduce using rule 42 (statement)


State 139

   45 statement: DO block WHILE BRACKET_L expr . BRACKET_R SEMICOLON
   62 binop: expr . PLUS expr
   63      | expr . MINUS expr
   64      | expr . STAR expr
   65      | expr . SLASH expr
   66      | expr . PERCENT expr
   67      | expr . LE expr
   68      | expr . LT expr
   69      | expr . GE expr
   70      | expr . GT expr
   71      | expr . EQ expr
   72      | expr . NE expr
   73      | expr . OR expr
   74      | expr . AND expr

    BRACKET_R  shift, and go to state 147
    MINUS      shift, and go to state 90
    PLUS       shift, and go to state 91
    STAR       shift, and go to state 92
    SLASH      shift, and go to state 93
    PERCENT    shift, and go to state 94
    LE         shift, and go to state 95
    LT         shift, and go to state 96
    GE         shift, and go to state 97
    GT         shift, and go to state 98
    EQ         shift, and go to state 99
    NE         shift, and go to state 100
    OR         shift, and go to state 101
    AND        shift, and go to state 102


State 140

   44 statement: WHILE BRACKET_L expr BRACKET_R block .

    $default  reduce using rule 44 (statement)


State 141

   46 statement: FOR BRACKET_L INT ID LET . expr COMMA expr COMMA expr BRACKET_R block
   47          | FOR BRACKET_L INT ID LET . expr COMMA expr BRACKET_R block

    BRACKET_L  shift, and go to state 55
    MINUS      shift, and go to state 57
    NOT        shift, and go to state 58
    INTVAL     shift, and go to state 59
    FLOATVAL   shift, and go to state 60
    ID         shift, and go to state 61
    BOOLVAL    shift, and go to state 62

    expr      go to state 148
    funcall   go to state 64
    constant  go to state 65
    monop     go to state 66
    binop     go to state 67


State 142

   32 expr: BRACKET_L type BRACKET_R expr .
   62 binop: expr . PLUS expr
   63      | expr . MINUS expr
   64      | expr . STAR expr
   65      | expr . SLASH expr
   66      | expr . PERCENT expr
   67      | expr . LE expr
   68      | expr . LT expr
   69      | expr . GE expr
   70      | expr . GT expr
   71      | expr . EQ expr
   72      | expr . NE expr
   73      | expr . OR expr
   74      | expr . AND expr

    $default  reduce using rule 32 (expr)


State 143

   25 exprs: expr COMMA exprs .

    $default  reduce using rule 25 (exprs)


State 144

   23 localfunvar: funheader CB_L funbody CB_R localfunvar .

    $default  reduce using rule 23 (localfunvar)


State 145

   18 localfunvar: type ID LET expr SEMICOLON .
   21            | type ID LET expr SEMICOLON . localfunvar

    FLOAT  shift, and go to state 9
    INT    shift, and go to state 10
    BOOL   shift, and go to state 11
    VOID   shift, and go to state 12

    $default  reduce using rule 18 (localfunvar)

    funheader    go to state 33
    localfunvar  go to state 149
    type         go to state 41


State 146

   43 statement: IF BRACKET_L expr BRACKET_R block ELSE . block

    CB_L    shift, and go to state 50
    IF      shift, and go to state 27
    DO      shift, and go to state 28
    WHILE   shift, and go to state 29
    FOR     shift, and go to state 30
    RETURN  shift, and go to state 31
    ID      shift, and go to state 32

    funcall    go to state 36
    statement  go to state 51
    assign     go to state 39
    id         go to state 40
    block      go to state 150


State 147

   45 statement: DO block WHILE BRACKET_L expr BRACKET_R . SEMICOLON

    SEMICOLON  shift, and go to state 151


State 148

   46 statement: FOR BRACKET_L INT ID LET expr . COMMA expr COMMA expr BRACKET_R block
   47          | FOR BRACKET_L INT ID LET expr . COMMA expr BRACKET_R block
   62 binop: expr . PLUS expr
   63      | expr . MINUS expr
   64      | expr . STAR expr
   65      | expr . SLASH expr
   66      | expr . PERCENT expr
   67      | expr . LE expr
   68      | expr . LT expr
   69      | expr . GE expr
   70      | expr . GT expr
   71      | expr . EQ expr
   72      | expr . NE expr
   73      | expr . OR expr
   74      | expr . AND expr

    COMMA    shift, and go to state 152
    MINUS    shift, and go to state 90
    PLUS     shift, and go to state 91
    STAR     shift, and go to state 92
    SLASH    shift, and go to state 93
    PERCENT  shift, and go to state 94
    LE       shift, and go to state 95
    LT       shift, and go to state 96
    GE       shift, and go to state 97
    GT       shift, and go to state 98
    EQ       shift, and go to state 99
    NE       shift, and go to state 100
    OR       shift, and go to state 101
    AND      shift, and go to state 102


State 149

   21 localfunvar: type ID LET expr SEMICOLON localfunvar .

    $default  reduce using rule 21 (localfunvar)


State 150

   43 statement: IF BRACKET_L expr BRACKET_R block ELSE block .

    $default  reduce using rule 43 (statement)


State 151

   45 statement: DO block WHILE BRACKET_L expr BRACKET_R SEMICOLON .

    $default  reduce using rule 45 (statement)


State 152

   46 statement: FOR BRACKET_L INT ID LET expr COMMA . expr COMMA expr BRACKET_R block
   47          | FOR BRACKET_L INT ID LET expr COMMA . expr BRACKET_R block

    BRACKET_L  shift, and go to state 55
    MINUS      shift, and go to state 57
    NOT        shift, and go to state 58
    INTVAL     shift, and go to state 59
    FLOATVAL   shift, and go to state 60
    ID         shift, and go to state 61
    BOOLVAL    shift, and go to state 62

    expr      go to state 153
    funcall   go to state 64
    constant  go to state 65
    monop     go to state 66
    binop     go to state 67


State 153

   46 statement: FOR BRACKET_L INT ID LET expr COMMA expr . COMMA expr BRACKET_R block
   47          | FOR BRACKET_L INT ID LET expr COMMA expr . BRACKET_R block
   62 binop: expr . PLUS expr
   63      | expr . MINUS expr
   64      | expr . STAR expr
   65      | expr . SLASH expr
   66      | expr . PERCENT expr
   67      | expr . LE expr
   68      | expr . LT expr
   69      | expr . GE expr
   70      | expr . GT expr
   71      | expr . EQ expr
   72      | expr . NE expr
   73      | expr . OR expr
   74      | expr . AND expr

    BRACKET_R  shift, and go to state 154
    COMMA      shift, and go to state 155
    MINUS      shift, and go to state 90
    PLUS       shift, and go to state 91
    STAR       shift, and go to state 92
    SLASH      shift, and go to state 93
    PERCENT    shift, and go to state 94
    LE         shift, and go to state 95
    LT         shift, and go to state 96
    GE         shift, and go to state 97
    GT         shift, and go to state 98
    EQ         shift, and go to state 99
    NE         shift, and go to state 100
    OR         shift, and go to state 101
    AND        shift, and go to state 102


State 154

   47 statement: FOR BRACKET_L INT ID LET expr COMMA expr BRACKET_R . block

    CB_L    shift, and go to state 50
    IF      shift, and go to state 27
    DO      shift, and go to state 28
    WHILE   shift, and go to state 29
    FOR     shift, and go to state 30
    RETURN  shift, and go to state 31
    ID      shift, and go to state 32

    funcall    go to state 36
    statement  go to state 51
    assign     go to state 39
    id         go to state 40
    block      go to state 156


State 155

   46 statement: FOR BRACKET_L INT ID LET expr COMMA expr COMMA . expr BRACKET_R block

    BRACKET_L  shift, and go to state 55
    MINUS      shift, and go to state 57
    NOT        shift, and go to state 58
    INTVAL     shift, and go to state 59
    FLOATVAL   shift, and go to state 60
    ID         shift, and go to state 61
    BOOLVAL    shift, and go to state 62

    expr      go to state 157
    funcall   go to state 64
    constant  go to state 65
    monop     go to state 66
    binop     go to state 67


State 156

   47 statement: FOR BRACKET_L INT ID LET expr COMMA expr BRACKET_R block .

    $default  reduce using rule 47 (statement)


State 157

   46 statement: FOR BRACKET_L INT ID LET expr COMMA expr COMMA expr . BRACKET_R block
   62 binop: expr . PLUS expr
   63      | expr . MINUS expr
   64      | expr . STAR expr
   65      | expr . SLASH expr
   66      | expr . PERCENT expr
   67      | expr . LE expr
   68      | expr . LT expr
   69      | expr . GE expr
   70      | expr . GT expr
   71      | expr . EQ expr
   72      | expr . NE expr
   73      | expr . OR expr
   74      | expr . AND expr

    BRACKET_R  shift, and go to state 158
    MINUS      shift, and go to state 90
    PLUS       shift, and go to state 91
    STAR       shift, and go to state 92
    SLASH      shift, and go to state 93
    PERCENT    shift, and go to state 94
    LE         shift, and go to state 95
    LT         shift, and go to state 96
    GE         shift, and go to state 97
    GT         shift, and go to state 98
    EQ         shift, and go to state 99
    NE         shift, and go to state 100
    OR         shift, and go to state 101
    AND        shift, and go to state 102


State 158

   46 statement: FOR BRACKET_L INT ID LET expr COMMA expr COMMA expr BRACKET_R . block

    CB_L    shift, and go to state 50
    IF      shift, and go to state 27
    DO      shift, and go to state 28
    WHILE   shift, and go to state 29
    FOR     shift, and go to state 30
    RETURN  shift, and go to state 31
    ID      shift, and go to state 32

    funcall    go to state 36
    statement  go to state 51
    assign     go to state 39
    id         go to state 40
    block      go to state 159


State 159

   46 statement: FOR BRACKET_L INT ID LET expr COMMA expr COMMA expr BRACKET_R block .

    $default  reduce using rule 46 (statement)
