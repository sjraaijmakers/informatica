#include "ast.h"

#include <stdlib.h> // exit()
#include <unistd.h> // fork() chdir()
#include <sys/types.h> // pid
#include <stdio.h> // print()
#include <string.h> // strcmpr
#include <sys/wait.h> // wait()

// source 1: http://www.csl.mtu.edu/cs4411.ck/www/NOTES/process/fork/shell.c

// Catch ctrl + C
void signal_catch() {
    printf("\nType exit to quit.\n");
    signal(SIGINT, signal_catch);
}

// Initialize on startup wat verder???
void initialize(void){
    signal(SIGINT, signal_catch);
}

// Execute program (via node)
void execute(node_t* node){
    // Exit shell
    if (strcmp(node->command.program, "exit") == 0) {
        exit(0);
    }
    // CD command
    else if (strcmp(node->command.program, "cd") == 0) {
        chdir(node->command.argv[1]);
        return;
    }
    // Fork process + Execute program
    int status;
    pid_t pid = fork();
    if (pid < 0) {
        printf("Fork error. \n");
        exit(1);
    }
    else if (pid == 0) {
        if(execvp(node->command.program, node->command.argv) < 0){
            // mooie errors:
            printf("%s\n", node->command.program);
            perror("Error in execvp");
            exit(1);
        }
    }
    else {
        waitpid(pid, &status, 0);
    }
}

void piped(node_t* node){
    unsigned int i;
    int pd2 = 0;
    for(i = 0; i < node->pipe.n_parts - 1; i++){

        pipe(pd);
        if (!fork()) {
            dup2(pd[1], 1);
            if(pd2){
                dup2(pd2, 0);
            }
            execute(node->pipe.parts[i]);
        }
        close(pd[1]);
        if(pd2){
            close(pd2);
        }
        printf("%d\n", pd2);
        close(pd[0]);
        pd2 = pd[0];
        printf("%d\n", pd2);
   }
   if (!fork()) {
       dup2(pd2, 0);
       execute(node->pipe.parts[i]);
   }
   if(pd2){
       close(pd2);
   }
}

void commands(node_t* node){
    switch(node->type){
        case NODE_COMMAND:
            execute(node);
            break;
        case NODE_PIPE:
            piped(node);
            break;
        case NODE_SEQUENCE:
            commands(node->sequence.first);
            commands(node->sequence.second);
            break;
        case NODE_REDIRECT:
            break;
        case NODE_SUBSHELL:
            break;
        default:
            perror("");
            break;
    }
}

void run_command(node_t* node){
    commands(node);
    free_tree(node);
}
